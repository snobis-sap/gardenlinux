#!/usr/bin/env bash

set -euxo pipefail

rootfs_work="$(mktemp -d)"

mount -t tmpfs tmpfs "$rootfs_work"

export PATH="/builder/image.d:$PATH"


MYROOT="$(mktemp -d)" # fixme: recursive?
mount -t tmpfs tmpfs "$MYROOT"

# mkdir -p "$MYROOT"/etc
# mkdir -p "$MYROOT"/proc
# mkdir -p "$MYROOT"/dev
# mkdir -p "$MYROOT"/sys
# mkdir -p "$MYROOT"/tmp
# mkdir -p "$MYROOT"/boot/efi
mkdir -p "$MYROOT"/sysroot

OSTREE_SYSROOT="$MYROOT/sysroot"

OSTREE_REPO=$OSTREE_SYSROOT/ostree/repo
OSTREE_REF="gardenlinux/today/$BUILDER_ARCH"


rootfs="$1"
output="$2"


tar xf "$rootfs" -C "$rootfs_work"
# cp -a "$rootfs/." "$rootfs_work"



find "$rootfs_work/var/log/" -type f -delete

kernel="$(find "$rootfs_work"/boot -name 'vmlinuz-*' | sort -V | tail -n 1)"
version="${kernel#*-}"


# ostree kernel location: https://ostreedev.github.io/ostree/deployment/#contents-of-a-deployment
mkdir -p "$rootfs_work"/usr/lib/modules/$version/
cp "$rootfs_work"/boot/vmlinuz* "$rootfs_work"/usr/lib/modules/$version/vmlinuz
cp "$rootfs_work/boot/initrd.img-$version" "$rootfs_work"/usr/lib/modules/$version/initramfs.img


mv "$rootfs_work"/etc "$rootfs_work"/usr/etc


ostree admin init-fs --modern $OSTREE_SYSROOT
ostree init --mode=archive --repo=$OSTREE_REPO
ostree admin os-init --sysroot=$OSTREE_SYSROOT gardenlinux
ostree config --repo=$OSTREE_REPO set sysroot.bootloader none
ostree commit --repo=$OSTREE_REPO --branch $OSTREE_REF --skip-if-unchanged -s "First Commit" --no-xattrs "$rootfs_work"
# fixme: what does the '--karg-append=ro' do?
ostree admin deploy --karg=root=LABEL=ROOT --karg-append=efi=runtime --karg-append=systemd.journald.forward_to_console=1 --sysroot=$OSTREE_SYSROOT --os=gardenlinux $OSTREE_REF



mydir=`ls "$OSTREE_SYSROOT"/ostree/boot.1.1/gardenlinux/`
echo "--- DEBUG --- mydir $mydir"
mkdir -p "$OSTREE_SYSROOT"/ostree/boot.1.1/gardenlinux/$mydir/0/sysroot




# wanted: raw disk image file with 2 partitions
# efi partition
# rootfs: "$rootfs_work"

# cp -r $OSTREE_SYSROOT/boot/. "$MYROOT"/boot/efi/.


# makepart "$MYROOT" < /builder/features/ostree/fstab | makedisk "$MYROOT" "$output"

efi_partition=$(mktemp)
root_partition=$(mktemp)
partitions=$(mktemp)

boot_dir=$(mktemp -d)
cp -r $OSTREE_SYSROOT/boot/. $boot_dir

mount --bind $boot_dir $rootfs_work/boot/efi
mount --rbind /proc $rootfs_work/proc
mount --rbind /sys $rootfs_work/sys

SYSTEMD_ESP_PATH=/boot/efi chroot $rootfs_work bootctl --no-variables install

umount -l $rootfs_work/proc
umount -l $rootfs_work/sys
umount $rootfs_work/boot/efi


truncate -s 1G "$efi_partition"
make_reproducible_vfat $OSTREE_SYSROOT/boot "$efi_partition"
size=$(du -b "$efi_partition" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' "MB=1048576")
part_uuid_uefi=b0e0359c-007b-4361-a0d1-a7ca2d73fe3c
echo -e "$part_uuid_uefi\tuefi\t$size\t0\t$efi_partition\tEFI" >> "$partitions"

truncate -s 4G "$root_partition"
make_reproducible_ext4 -l ROOT "$MYROOT" "$root_partition"
size=$(du -b "$root_partition" | awk '{ padded_size = $1 + (MB - ($1 % MB) % MB); print (padded_size / MB) }' "MB=1048576")
part_uuid_rootfs=a9bef950-8218-4888-9f1c-1ad8bb481807
echo -e "$part_uuid_rootfs\tlinux\t$size\t0\t$root_partition\tROOT" >> "$partitions"

makedisk $rootfs_work "$output" < "$partitions"
